[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyloo"
version = "0.1.0"
description = "Python implementation of Leave-One-Out cross-validation (LOO-CV) and Pareto Smoothed Importance Sampling (PSIS) for Bayesian models"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Jordan Deklerk", email = "jordan.deklerk@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
dev = [
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "pre-commit>=2.20.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
minversion = "7.0"
xfail_strict = true
addopts = ["-ra", "--cov=pyloo", "--color=yes"]

[tool.mypy]
python_version = "3.10"
no_implicit_optional = false
strict_optional = true
warn_redundant_casts = false
check_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_decorators = false
ignore_missing_imports = true
warn_unused_ignores = false

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["C4", "D", "E", "F", "I", "UP", "W", "RUF", "T20", "TID"]
ignore = [
    "E501",  # Line too long
    "F841",  # Local variable is assigned to but never used
    "RUF001",  # String contains ambiguous character
    "RUF002",  # Docstring contains ambiguous character
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D105",  # Missing docstring in magic method
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
omit = ["*examples*"]
